// #pragma kernel BruteForceUDF
// #pragma kernel JumpFlood
// #pragma kernel FinalizeSDF
// #pragma kernel SeedFromScalarField
//
// //--------------------------------------------------------------------------------------
// // SHARED DATA STRUCTURES
// //--------------------------------------------------------------------------------------
//
// // Input segment data
// StructuredBuffer<float4> _Segments;
// StructuredBuffer<int> _SegmentCount;
// uint _TextureResolution;
//
// // Seed generation
// RWTexture2D<float4> _SeedTexture; // RG = closest point world pos, B = segment ID, A = distance
//
// // Jump flood ping-pong textures
// Texture2D<float4> _InputTexture;
// RWTexture2D<float4> _OutputTexture;
// int _JumpDistance;
//
// // Final SDF output
// Texture2D<float4> _JFAResult;
// RWTexture2D<float4> _SDFTexture;
//
// // Scalar field for signed SDF
// Texture2D<float> _ScalarField;
// SamplerState sampler_ScalarField;
// float _IsoValue;
// bool _OutputUnsigned;
// bool _HasScalarField;
//
// // Spatial grid acceleration
// uint _GridResolution;
// uint _MaxSegmentsPerCell;
// RWByteAddressBuffer _GridCounts;
// RWStructuredBuffer<uint> _GridIndices;
//
// //--------------------------------------------------------------------------------------
// // HELPER FUNCTIONS
// //--------------------------------------------------------------------------------------
//
// float2 ClosestPointOnSegment(float2 inputPoint, float2 a, float2 b, out float distance)
// {
//     float2 ab = b - a;
//     float2 ap = inputPoint - a;
//     float t = saturate(dot(ap, ab) / dot(ab, ab));
//     float2 closest = a + t * ab;
//     distance = length(inputPoint - closest);
//     return closest;
// }
//
// //--------------------------------------------------------------------------------------
// // KERNEL: SeedFromSegments
// // Generates initial seed points from line segments
// //--------------------------------------------------------------------------------------
//
// [numthreads(8,8,1)]
// void BruteForceUDF(uint3 id : SV_DispatchThreadID)
// {
//     if (id.x >= _TextureResolution || id.y >= _TextureResolution)
//         return;
//     
//     int segmentCount = _SegmentCount[0];
//     
//     // Convert pixel to world space [-1, 1]
//     float2 worldPos = (float2(id.xy) / float(_TextureResolution)) * 2.0f - 1.0f;
//     
//     float minDistance = 1e9;
//     float2 closestPoint = float2(0, 0);
//     uint closestSegmentID = 0;
//     
//     // Find closest point on any segment
//     for (uint i = 0; i < (uint)segmentCount; i++)
//     {
//         float2 segmentStart = _Segments[i].xy;
//         float2 segmentEnd = _Segments[i].zw;
//         
//         float dist;
//         float2 closest = ClosestPointOnSegment(worldPos, segmentStart, segmentEnd, dist);
//         
//         if (dist < minDistance)
//         {
//             minDistance = dist;
//             closestPoint = closest;
//             closestSegmentID = i;
//         }
//     }
//     
//     // Store seed data: closest point in RG, segment ID in B, distance in A
//     _SeedTexture[id.xy] = float4(closestPoint.x, closestPoint.y, (float)closestSegmentID, minDistance);
// }
//
// //--------------------------------------------------------------------------------------
// // KERNEL: SeedFromScalarField
// // Generates seeds from scalar field boundaries
// //--------------------------------------------------------------------------------------
//
// [numthreads(8,8,1)]
// void SeedFromScalarField(uint3 id : SV_DispatchThreadID)
// {
//     if (id.x >= _TextureResolution || id.y >= _TextureResolution)
//         return;
//
//     // Calculate UV coordinate for current thread
//     float2 uv = (float2(id.xy) + 0.5f) / float(_TextureResolution);
//
//     // Get scalar field texture dimensions for neighbor sampling
//     float2 scalarTexelSize;
//     uint scalarWidth, scalarHeight;
//     _ScalarField.GetDimensions(scalarWidth, scalarHeight);
//     scalarTexelSize = 1.0 / float2(scalarWidth, scalarHeight);
//
//     // Sample scalar field at current position and neighbors
//     float val_tl = _ScalarField.SampleLevel(sampler_ScalarField, uv, 0).r;
//     float val_tr = _ScalarField.SampleLevel(sampler_ScalarField, uv + float2(scalarTexelSize.x, 0), 0).r;
//     float val_bl = _ScalarField.SampleLevel(sampler_ScalarField, uv + float2(0, scalarTexelSize.y), 0).r;
//
//     bool inside_tl = val_tl < _IsoValue;
//     bool inside_tr = val_tr < _IsoValue;
//     bool inside_bl = val_bl < _IsoValue;
//
//     // Check if this pixel is on the boundary
//     if (inside_tl != inside_tr || inside_tl != inside_bl)
//     {
//         // Boundary pixel - seed is its own position
//         float2 worldPos = (float2(id.xy) / float(_TextureResolution)) * 2.0 - 1.0;
//         _SeedTexture[id.xy] = float4(worldPos.x, worldPos.y, 0, 0);
//     }
//     else
//     {
//         // Not a boundary pixel - assign infinite distance
//         _SeedTexture[id.xy] = float4(0, 0, 0, 1e9);
//     }
// }
//
// //--------------------------------------------------------------------------------------
// // KERNEL: JumpFlood
// // Implements the Jump Flood Algorithm for distance field propagation
// //--------------------------------------------------------------------------------------
//
// [numthreads(8,8,1)]
// void JumpFlood(uint3 id : SV_DispatchThreadID)
// {
//     if (id.x >= _TextureResolution || id.y >= _TextureResolution)
//         return;
//     
//     float2 currentPos = (float2(id.xy) / float(_TextureResolution)) * 2.0f - 1.0f;
//     float4 bestSeed = _InputTexture[id.xy];
//     float bestDistance = bestSeed.a;
//     
//     // Calculate actual distance if we have a valid seed
//     if (bestDistance < 1e8)
//     {
//         float2 seedPos = bestSeed.xy;
//         bestDistance = length(currentPos - seedPos);
//     }
//     
//     // Check 9 neighbors at jump distance
//     for (int dy = -1; dy <= 1; dy++)
//     {
//         for (int dx = -1; dx <= 1; dx++)
//         {
//             int2 samplePos = int2(id.xy) + int2(dx, dy) * _JumpDistance;
//             
//             // Clamp to texture bounds
//             if (samplePos.x >= 0 && samplePos.x < (int)_TextureResolution &&
//                 samplePos.y >= 0 && samplePos.y < (int)_TextureResolution)
//             {
//                 float4 neighborSeed = _InputTexture[samplePos];
//                 
//                 // Skip invalid seeds
//                 if (neighborSeed.a < 1e8)
//                 {
//                     float2 seedPos = neighborSeed.xy;
//                     float dist = length(currentPos - seedPos);
//                     
//                     if (dist < bestDistance)
//                     {
//                         bestDistance = dist;
//                         bestSeed = float4(seedPos.x, seedPos.y, neighborSeed.z, dist);
//                     }
//                 }
//             }
//         }
//     }
//     
//     _OutputTexture[id.xy] = bestSeed;
// }
//
// //--------------------------------------------------------------------------------------
// // KERNEL: FinalizeSDF
// // Converts Jump Flood results to final SDF with proper sign handling
// //--------------------------------------------------------------------------------------
//
// [numthreads(8,8,1)]
// void FinalizeSDF(uint3 id : SV_DispatchThreadID)
// {
//     if (id.x >= _TextureResolution || id.y >= _TextureResolution)
//         return;
//     
//     float4 jfaData = _JFAResult[id.xy];
//     float distance = jfaData.a;
//     float segmentID = jfaData.z;
//     
//     if (_OutputUnsigned)
//     {
//         // Surface SDF: unsigned distance in R, positive sign in G
//         _SDFTexture[id.xy] = float4(distance, 1.0f, segmentID, 0);
//     }
//     else if (_HasScalarField)
//     {
//         // Band SDF: compute sign from scalar field
//         float2 worldPos = (float2(id.xy) / float(_TextureResolution)) * 2.0f - 1.0f;
//         float2 fieldUV = (worldPos + 1.0) * 0.5; // Convert [-1,1] to [0,1]
//         float fieldValue = _ScalarField.SampleLevel(sampler_ScalarField, fieldUV, 0).r;
//         
//         float sign = (fieldValue < _IsoValue) ? 1.0f : -1.0f;
//         _SDFTexture[id.xy] = float4(distance, sign, segmentID, 0);
//     }
//     else
//     {
//         // Fallback: unsigned distance with positive sign
//         _SDFTexture[id.xy] = float4(distance, 1.0f, segmentID, 0);
//     }
// }

#pragma kernel BruteForceUDF
#pragma kernel JumpFlood
#pragma kernel FinalizeSDF
#pragma kernel SeedFromScalarField
#pragma kernel SeedFromSegmentsHQ  // New high-quality seeding kernel

//--------------------------------------------------------------------------------------
// SHARED DATA STRUCTURES
//--------------------------------------------------------------------------------------

// Input segment data
StructuredBuffer<float4> _Segments;
StructuredBuffer<int> _SegmentCount;
uint _TextureResolution;

// Seed generation
RWTexture2D<float4> _SeedTexture; // RG = closest point world pos, B = segment ID, A = distance

// Jump flood ping-pong textures
Texture2D<float4> _InputTexture;
RWTexture2D<float4> _OutputTexture;
int _JumpDistance;

// Final SDF output
Texture2D<float4> _JFAResult;
RWTexture2D<float4> _SDFTexture;

// Scalar field for signed SDF
Texture2D<float> _ScalarField;
SamplerState sampler_ScalarField;
float _IsoValue;
bool _OutputUnsigned;
bool _HasScalarField;

// New parameters for high-quality seeding
uint _SeedSampleRadius;  // How many pixels around each seed to sample
float _MaxSeedDistance;  // Maximum distance to consider for seeding

//--------------------------------------------------------------------------------------
// HELPER FUNCTIONS
//--------------------------------------------------------------------------------------

float2 ClosestPointOnSegment(float2 inputPoint, float2 a, float2 b, out float distance)
{
    float2 ab = b - a;
    float2 ap = inputPoint - a;
    float t = saturate(dot(ap, ab) / dot(ab, ab));
    float2 closest = a + t * ab;
    distance = length(inputPoint - closest);
    return closest;
}

//--------------------------------------------------------------------------------------
// KERNEL: SeedFromSegmentsHQ
// High-quality seeding that samples around segment endpoints and midpoints
//--------------------------------------------------------------------------------------

[numthreads(8,8,1)]
void SeedFromSegmentsHQ(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _TextureResolution || id.y >= _TextureResolution)
        return;
    
    int segmentCount = _SegmentCount[0];
    
    // Convert pixel to world space [-1, 1]
    float2 worldPos = (float2(id.xy) / float(_TextureResolution)) * 2.0f - 1.0f;
    
    float minDistance = 1e9;
    float2 closestPoint = float2(0, 0);
    uint closestSegmentID = 0;
    
    // Only seed pixels that are close to segments to avoid unnecessary computation
    bool shouldSeed = false;
    
    // First pass: check if we're close enough to any segment to warrant seeding
    for (uint i = 0; i < (uint)segmentCount && !shouldSeed; i++)
    {
        float2 segmentStart = _Segments[i].xy;
        float2 segmentEnd = _Segments[i].zw;
        
        float dist;
        ClosestPointOnSegment(worldPos, segmentStart, segmentEnd, dist);
        
        if (dist < _MaxSeedDistance)
        {
            shouldSeed = true;
        }
    }
    
    if (shouldSeed)
    {
        // Second pass: find the actual closest point
        for (uint i = 0; i < (uint)segmentCount; i++)
        {
            float2 segmentStart = _Segments[i].xy;
            float2 segmentEnd = _Segments[i].zw;
            
            float dist;
            float2 closest = ClosestPointOnSegment(worldPos, segmentStart, segmentEnd, dist);
            
            if (dist < minDistance)
            {
                minDistance = dist;
                closestPoint = closest;
                closestSegmentID = i;
            }
        }
        
        // Store seed data: closest point in RG, segment ID in B, distance in A
        _SeedTexture[id.xy] = float4(closestPoint.x, closestPoint.y, (float)closestSegmentID, minDistance);
    }
    else
    {
        // Not close to any segment - mark as invalid seed
        _SeedTexture[id.xy] = float4(0, 0, 0, 1e9);
    }
}

//--------------------------------------------------------------------------------------
// KERNEL: SeedFromSegments (Original brute force - kept for compatibility)
//--------------------------------------------------------------------------------------

[numthreads(8,8,1)]
void BruteForceUDF(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _TextureResolution || id.y >= _TextureResolution)
        return;
    
    int segmentCount = _SegmentCount[0];
    
    // Convert pixel to world space [-1, 1]
    float2 worldPos = (float2(id.xy) / float(_TextureResolution)) * 2.0f - 1.0f;
    
    float minDistance = 1e9;
    float2 closestPoint = float2(0, 0);
    uint closestSegmentID = 0;
    
    // Find closest point on any segment
    for (uint i = 0; i < (uint)segmentCount; i++)
    {
        float2 segmentStart = _Segments[i].xy;
        float2 segmentEnd = _Segments[i].zw;
        
        float dist;
        float2 closest = ClosestPointOnSegment(worldPos, segmentStart, segmentEnd, dist);
        
        if (dist < minDistance)
        {
            minDistance = dist;
            closestPoint = closest;
            closestSegmentID = i;
        }
    }
    
    // Store seed data: closest point in RG, segment ID in B, distance in A
    _SeedTexture[id.xy] = float4(closestPoint.x, closestPoint.y, (float)closestSegmentID, minDistance);
}

//--------------------------------------------------------------------------------------
// KERNEL: SeedFromScalarField
// Generates seeds from scalar field boundaries
//--------------------------------------------------------------------------------------

[numthreads(8,8,1)]
void SeedFromScalarField(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _TextureResolution || id.y >= _TextureResolution)
        return;

    // Calculate UV coordinate for current thread
    float2 uv = (float2(id.xy) + 0.5f) / float(_TextureResolution);

    // Get scalar field texture dimensions for neighbor sampling
    float2 scalarTexelSize;
    uint scalarWidth, scalarHeight;
    _ScalarField.GetDimensions(scalarWidth, scalarHeight);
    scalarTexelSize = 1.0 / float2(scalarWidth, scalarHeight);

    // Sample scalar field at current position and neighbors
    float val_tl = _ScalarField.SampleLevel(sampler_ScalarField, uv, 0).r;
    float val_tr = _ScalarField.SampleLevel(sampler_ScalarField, uv + float2(scalarTexelSize.x, 0), 0).r;
    float val_bl = _ScalarField.SampleLevel(sampler_ScalarField, uv + float2(0, scalarTexelSize.y), 0).r;

    bool inside_tl = val_tl < _IsoValue;
    bool inside_tr = val_tr < _IsoValue;
    bool inside_bl = val_bl < _IsoValue;

    // Check if this pixel is on the boundary
    if (inside_tl != inside_tr || inside_tl != inside_bl)
    {
        // Boundary pixel - seed is its own position
        float2 worldPos = (float2(id.xy) / float(_TextureResolution)) * 2.0 - 1.0;
        _SeedTexture[id.xy] = float4(worldPos.x, worldPos.y, 0, 0);
    }
    else
    {
        // Not a boundary pixel - assign infinite distance
        _SeedTexture[id.xy] = float4(0, 0, 0, 1e9);
    }
}

//--------------------------------------------------------------------------------------
// KERNEL: JumpFlood
// Implements the Jump Flood Algorithm for distance field propagation
//--------------------------------------------------------------------------------------

[numthreads(8,8,1)]
void JumpFlood(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _TextureResolution || id.y >= _TextureResolution)
        return;
    
    float2 currentPos = (float2(id.xy) / float(_TextureResolution)) * 2.0f - 1.0f;
    float4 bestSeed = _InputTexture[id.xy];
    float bestDistance = bestSeed.a;
    
    // Calculate actual distance if we have a valid seed
    if (bestDistance < 1e8)
    {
        float2 seedPos = bestSeed.xy;
        bestDistance = length(currentPos - seedPos);
    }
    
    // Check 9 neighbors at jump distance
    for (int dy = -1; dy <= 1; dy++)
    {
        for (int dx = -1; dx <= 1; dx++)
        {
            int2 samplePos = int2(id.xy) + int2(dx, dy) * _JumpDistance;
            
            // Clamp to texture bounds
            if (samplePos.x >= 0 && samplePos.x < (int)_TextureResolution &&
                samplePos.y >= 0 && samplePos.y < (int)_TextureResolution)
            {
                float4 neighborSeed = _InputTexture[samplePos];
                
                // Skip invalid seeds
                if (neighborSeed.a < 1e8)
                {
                    float2 seedPos = neighborSeed.xy;
                    float dist = length(currentPos - seedPos);
                    
                    if (dist < bestDistance)
                    {
                        bestDistance = dist;
                        bestSeed = float4(seedPos.x, seedPos.y, neighborSeed.z, dist);
                    }
                }
            }
        }
    }
    
    _OutputTexture[id.xy] = bestSeed;
}

//--------------------------------------------------------------------------------------
// KERNEL: FinalizeSDF
// Converts Jump Flood results to final SDF with proper sign handling
//--------------------------------------------------------------------------------------

[numthreads(8,8,1)]
void FinalizeSDF(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _TextureResolution || id.y >= _TextureResolution)
        return;
    
    float4 jfaData = _JFAResult[id.xy];
    float distance = jfaData.a;
    float segmentID = jfaData.z;
    
    if (_OutputUnsigned)
    {
        // Surface SDF: unsigned distance in R, positive sign in G
        _SDFTexture[id.xy] = float4(distance, 1.0f, segmentID, 0);
    }
    else if (_HasScalarField)
    {
        // Band SDF: compute sign from scalar field
        float2 worldPos = (float2(id.xy) / float(_TextureResolution)) * 2.0f - 1.0f;
        float2 fieldUV = (worldPos + 1.0) * 0.5; // Convert [-1,1] to [0,1]
        float fieldValue = _ScalarField.SampleLevel(sampler_ScalarField, fieldUV, 0).r;
        
        float sign = (fieldValue < _IsoValue) ? 1.0f : -1.0f;
        _SDFTexture[id.xy] = float4(distance, sign, segmentID, 0);
    }
    else
    {
        // Fallback: unsigned distance with positive sign
        _SDFTexture[id.xy] = float4(distance, 1.0f, segmentID, 0);
    }
}